/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
const{userAgent:e}=navigator,t=/NativeWebKit/i.test(e),s=Boolean(window.isNativeWebKitSafariExtensionInstalled),i=t||s;class a{get eventTypes(){return[]}#e(e){return 0==this.eventTypes.length||this.eventTypes.includes(e)}#t(e){if(!this.#e(e))throw Error(`invalid event type "${e}"`)}#s;addEventListener(e,t,s){if(this.#t(e),this.#s||(this.#s={}),s?.once){const s=t;t=function t(i){s.apply(this,arguments),this.removeEventListener(e,t)}}const i=this.#s;i[e]||(i[e]=[]),i[e].includes(t)||i[e].push(t)}hasEventListener(e,t){return this.#t(e),this.#s?.[e]?.includes(t)}removeEventListener(e,t){if(this.#t(e),this.hasEventListener(e,t)){const s=this.#s[e].indexOf(t);return this.#s[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#t(e.type),this.#s?.[e.type]){e.target=this;const t=this.#s[e.type].slice(0);for(let s=0,i=t.length;s<i;s++)t[s].call(this,e)}}get _prefix(){return""}_formatMessage(e){const t={...e};return t.type=`${this._prefix}-${e.type}`,t}}class n{#i=function(){};set prefix(e){const t=[console];e&&(Array.isArray(e)?t.push(...e):t.push(e)),this.#a=console.log.bind(...t),this.#n=console.warn.bind(...t),this.#o=console.error.bind(...t)}isLoggingEnabled=!1;get log(){return this.#i}#a=console.log.bind(console);isWarningEnabled=!1;get warn(){return this.#i}#n=console.warn.bind(console);isErrorEnabled=!0;get error(){return this.#i}#o=console.error.bind(console);set isEnabled(e){this.isLoggingEnabled=e,this.isWarningEnabled=e,this.isErrorEnabled=e}constructor(e){e&&(this.prefix=e)}}const o=new n,r=new Set;const l={};function d(e,t){o.log(`adding callback with prefix "${t}"`,e),l[t]||(l[t]=[]),l[t].push(e)}function c(e){Array.isArray(e)||(e=[e]),o.log("nativewebkit-receive messages",e),e.forEach((e=>{const[t,s]=e.type.split("-");o.log(`received "${t}" message of type "${s}"`,e),e.type=s,l[t]&&0!=l[t].length?l[t].forEach((t=>{o.log("triggering callback",t,"for message",e),t(e)})):o.warn("no callbacks listening for prefix",t)}))}async function h(e){if(i){if(o.log("sending message to app...",e),t){const t=await webkit.messageHandlers.nativewebkit_reply.postMessage(e);return o.log("app response",t),t&&c(t),!0}return new Promise((t=>{const s=function(){for(var e=0;r.has(e);)e++;return r.add(e),e}();window.dispatchEvent(new CustomEvent("nativewebkit-send",{detail:{message:e,id:s}})),window.addEventListener(`nativewebkit-receive-${s}`,(e=>{const i=e.detail;o.log(`did receive message for nativewebkit-receive-${s}?`,i),i||o.error(`didn't receive message for nativewebkit-receive-${s}`),t(i),r.delete(s)}),{once:!0})}))}o.warn("NativeWebKit.js is not enabled - run in the NativeWebKit app or enable the NativeWebKit Safari Web Extension")}window.__NATIVEWEBKIT_LISTENER_FLAG__||(window.__NATIVEWEBKIT_LISTENER_FLAG__=!0,o.log('adding "nativewebkit-receive" window listener'),window.addEventListener("nativewebkit-receive",(e=>{c(e.detail)})));const p=new n;function g(e,t){return 0===t?e:g(t,e%t)}function v(e){if(p.log("finding greatestCommonFactor of numbers",e),0==(e=e.filter((e=>e>0))).length)return null;const t=e.reduce(((e,t)=>g(e,t)));return p.log("greatestCommonFactor",t),0==t?null:t}const u=new n("AppMessagePoll");class b{static get#r(){return s}static#l=[];static#d(e){return this.#l.includes(e)?(u.log("poll already included"),this.#l.indexOf(e)):this.#l.push(e)}static#c(e){return this.#l.includes(e)?(e.stop(),this.#l.splice(e,e.#h),this.#p(),!0):(u.log("poll wasn't included"),!1)}get#h(){return b.#l.indexOf(this)}#g;#v;#u=0;get interval(){return this.#v}set interval(e){e<=0?u.error(`invalid interval ${e}ms`):e!=this.#v?(this.#v=e,this.#b&&b.#p()):u.warn("assigning same interval")}constructor(e,t){this.#g=e,this.#v=t,b.#d(this)}static#w=null;static get#m(){return null!=this.#w}static#A=null;static get#E(){return this.#l.filter((e=>e.#y))}static get#f(){return this.#E.map((e=>e.#v))}static#M(){var e=v(this.#f);if(u.log(`new interval ${e}`),this.#A!=e)return u.log(`interval updated from ${this.#A} to ${e}`),this.#A=e,!0}static async#L(){const e=Date.now(),t=this.#E.filter((t=>e-t.#u>=t.#v)),s=t.map((e=>e.#g()));if(u.log("messages",s),s.length>0){const e=await h(s);u.log("didReceiveMessage?",e),e||u.error("app didn't receive message")}else u.log("no messages to send");t.forEach((t=>t.#u=e))}static#k(){this.#m?u.log("tried to start AppMessagePoll when it's already running"):null!=this.#A?(u.log(`starting interval at ${this.#A}`),this.#w=window.setInterval(this.#L.bind(this),this.#A)):u.log("null interval")}static#I(){this.#m?(window.clearInterval(this.#w),this.#w=null):u.log("tried to stop AppMessagePoll when it already isn't running")}static#p(e=!1){if(!this.#m&&!e)return;const t=this.#M();this.#m||t?(u.log("restarting..."),this.#I(),this.#k()):u.log("no need to restart")}#y=!1;get#b(){return b.#m&&this.#y}start(){b.#r?this.#b?u.log("poll is already running"):(this.#y=!0,b.#p(!0)):u.warn("polling is not enabled")}stop(){this.#b&&(this.#y=!1,b.#p())}destroy(){u.log("destroying poll",this),b.#c(this)}}window.AppMessagePoll=b;const w=new n("AudioSessionManager");class m extends a{static#U=[];get eventTypes(){return m.#U}static#_=new m;static get shared(){return this.#_}get _prefix(){return"as"}_formatMessage(e){return super._formatMessage(e)}addEventListener(e,t,s){return super.addEventListener(...arguments)}removeEventListener(e,t){return super.removeEventListener(...arguments)}hasEventListener(e,t){return super.hasEventListener(...arguments)}dispatchEvent(e){return super.dispatchEvent(...arguments)}constructor(){if(super(),this.shared)throw new Error("AudioSessionManager is a singleton - use AudioSessionManager.shared");d(this.#T.bind(this),this._prefix),window.addEventListener("load",(()=>{})),window.addEventListener("unload",(()=>{}))}#T(e){w.log(`received background message of type ${e.type}`,e);const{type:t}=e;w.error(`uncaught message type ${t}`)}}var A=m.shared;const E=new n("HeadphoneMotionManager");class y extends a{static#U=["isAvailable","isActive","motionData","sensorLocation"];get eventTypes(){return y.#U}static#_=new y;static get shared(){return this.#_}get _prefix(){return"hm"}_formatMessage(e){return super._formatMessage(e)}addEventListener(e,t,s){return super.addEventListener(...arguments)}removeEventListener(e,t){return super.removeEventListener(...arguments)}hasEventListener(e,t){return super.hasEventListener(...arguments)}dispatchEvent(e){return super.dispatchEvent(...arguments)}constructor(){if(super(),this.shared)throw new Error("HeadphoneMotionManager is a singleton - use HeadphoneMotionManager.shared");d(this.#T.bind(this),this._prefix),window.addEventListener("load",(()=>{this.#D&&this.checkIsAvailable()})),window.addEventListener("unload",(()=>{this.#$&&this.#x&&this.stopUpdates()}))}#D=!1;get checkAvailabilityOnLoad(){return this.#D}set checkAvailabilityOnLoad(e){if("boolean"!=typeof e)throw Error("invalid newValue for checkAvailabilityOnLoad",e);this.#D=e}#x=!1;get stopUpdatesOnUnload(){return this.#x}set stopUpdatesOnUnload(e){if("boolean"!=typeof e)throw Error("invalid newValue for stopUpdatesOnUnload",e);this.#x=e}#T(e){E.log(`received background message of type ${e.type}`,e);const{type:t}=e;switch(t){case"isAvailable":this.#O(e.isAvailable);break;case"isActive":this.#P(e.isActive);break;case"getData":this.#R(e.motionData);break;default:E.error(`uncaught message type ${t}`)}}#W=null;get isAvailable(){return Boolean(this.#W)}#O(e){this.#W!=e&&(this.#W=e,E.log(`updated isAvailable to ${e}`),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}}),this.#W&&this.checkIsActive())}async checkIsAvailable(){E.log("checking isAvailable..."),await h(this.#C)}get#C(){return this._formatMessage({type:"isAvailable"})}#$=null;get isActive(){return Boolean(this.#$)}#P(e){this.#$!=e&&(this.#$=e,E.log(`updated isActive to ${this.isActive}`),this.dispatchEvent({type:"isActive",message:{isActive:this.isActive}}),this.#S.stop(),this.#$?(E.log("starting motion data poll"),this.#V.start()):(E.log("stopping motion data poll"),this.#V.stop()))}async checkIsActive(){E.log("checking isActive"),await h(this.#H())}#H(){return this._formatMessage({type:"isActive"})}#S=new b(this.#H.bind(this),50);async startUpdates(){this.isAvailable?this.isActive?E.warn("already active"):(E.log("starting motion updates"),this.#S.start(),await h(this.#N)):E.warn("not available")}get#N(){return this._formatMessage({type:"startUpdates"})}async stopUpdates(){this.isAvailable?this.isActive?(E.log("stopping motion updates"),this.#S.start(),await h(this.#F)):E.warn("already inactive"):E.warn("not available")}get#F(){return this._formatMessage({type:"stopUpdates"})}async toggleMotionUpdates(){this.isAvailable?this.isActive?await this.stopUpdates():await this.startUpdates():E.log("not available")}#K;get motionData(){return this.#K}get#B(){return this.motionData?.timestamp||0}#G=null;get sensorLocation(){return this.#G}#j(e){this.#G!=e&&(this.#G=e,E.log(`updated sensor location to ${e}`),this.dispatchEvent({type:"sensorLocation",message:{sensorLocation:this.sensorLocation}}))}#R(e){this.#K=e,E.log("received headphone motion data",this.motionData),this.dispatchEvent({type:"motionData",message:{motionData:this.motionData}}),this.#j(e.sensorLocation)}async checkMotionData(){E.log("checkMotionData"),await h(this.#q)}#q(){return this._formatMessage({type:"getData",timestamp:this.#B})}#V=new b(this.#q.bind(this),20)}var f=y.shared;export{A as AudioSessionManager,f as HeadphoneMotionManager};
