/**
 * @copyright Zack Qattan 2024
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).NativeWebKit={})}(this,(function(e){"use strict";const t=!1;function s(){}const a=console.log.bind(console),i=console.warn.bind(console),n=console.error.bind(console),r=console.assert.bind(console);class o{static#e={};constructor(e){if(o.#e[e])throw new Error(`"${e}" console already exists`);o.#e[e]=this}#t={log:t,warn:t,error:t};setLevelFlags(e){Object.assign(this.#t,e)}static setLevelFlagsForType(e,t){if(!this.#e[e])throw new Error(`no console found with type "${e}"`);this.#e[e].setLevelFlags(t)}static setAllLevelFlags(e){for(const t in this.#e)this.#e[t].setLevelFlags(e)}static create(e,t){return this.#e[e]||new o(e)}get log(){return this.#t.log?a:s}get warn(){return this.#t.warn?i:s}get error(){return this.#t.error?n:s}get assert(){return this.#t.assert?r:s}assertWithError(e,t){if(!e)throw new Error(t)}}function c(e,t){return o.create(e,t)}const l=c("EventDispatcher",{log:!1});class h{get eventTypes(){return[]}#s(e){return 0==this.eventTypes.length||this.eventTypes.includes(e)}#a(e){l.assertWithError(this.#s(e),`invalid event type "${e}"`)}#i;addEventListener(e,t,s){if(this.#a(e),this.#i||(this.#i={}),s?.once){const s=t;t=function t(a){s.apply(this,arguments),this.removeEventListener(e,t)}}const a=this.#i;a[e]||(a[e]=[]),a[e].includes(t)||a[e].push(t)}hasEventListener(e,t){return this.#a(e),this.#i?.[e]?.includes(t)}removeEventListener(e,t){if(this.#a(e),this.hasEventListener(e,t)){const s=this.#i[e].indexOf(t);return this.#i[e].splice(s,1),!0}return!1}dispatchEvent(e){if(this.#a(e.type),this.#i?.[e.type]){e.target=this;const t=this.#i[e.type].slice(0);for(let s=0,a=t.length;s<a;s++)t[s].call(this,e)}}get _prefix(){return""}_formatMessage(e){const t={...e};return t.type=`${this._prefix}-${e.type}`,t}}const g=c("platformUtils"),{userAgent:d}=navigator,p=/Safari/i.test(d)&&!/Chrome/i.test(d),u=/NativeWebKit/i.test(d);var v=Boolean(window.isNativeWebKitSafariExtensionInstalled);const m=async()=>!!(v=v||Boolean(window.isNativeWebKitSafariExtensionInstalled))||(g.log("checking if Safari Extension is installed..."),new Promise((e=>{const t=()=>{g.log("Safari Extension is installed"),v=!0,e(!0)};window.addEventListener("nativewebkit-extension-is-installed",t,{once:!0}),window.dispatchEvent(new Event("is-nativewebkit-extension-installed")),window.setTimeout((()=>{v||(g.log("Safari Extension is not installed"),window.removeEventListener("nativewebkit-extension-is-installed",t),e(!1))}),1)})));const f=async()=>!!(u||v)||await m(),k=/iPad|iPhone|iPod/.test(d),w=/Macintosh/.test(d),b=c("messaging"),y=new Set;const M={};function E(e,t){b.log(`adding callback with prefix "${t}"`,e),M[t]||(M[t]=[]),M[t].push(e)}function S(e){Array.isArray(e)||(e=[e]),e=e.flatMap((e=>"messages"==e.type?e.messages:e)),b.log("nativewebkit-receive messages",e),e.forEach((e=>{const[t,s]=e.type.split("-");b.log(`received "${t}" message of type "${s}"`,e),e.type=s,M[t]&&0!=M[t].length?M[t].forEach((t=>{b.log("triggering callback",t,"for message",e),t(e)})):b.warn("no callbacks listening for prefix",t)}))}window.__NATIVEWEBKIT_MESSAGING_FLAG__||(window.__NATIVEWEBKIT_MESSAGING_FLAG__=!0,b.log('adding "nativewebkit-receive" window listener'),window.addEventListener("nativewebkit-receive",(e=>{S(e.detail)})),window.addEventListener("load",(()=>{b.log("triggering window.load events...");const e=M["window.load"]?.map((e=>e())).flat().filter(Boolean);e.length>0&&L(e)})),window.addEventListener("unload",(()=>{b.log("triggering window.unload events...");const e=M["window.unload"]?.map((e=>e())).flat().filter(Boolean);e.length>0&&L(e)})));var O,A,T=[];async function L(e,t=!0){if(await f()){if(b.log("requesting to send message",e,"send immediately?",t),!e&&0==T.length)return void b.warn("no messages received, and no pending messages");if(e&&(0==T.length&&(O=new Promise((e=>{A=e}))),T.push(e),T=T.flat()),0==T.length)return void b.log("no messages to send");if(!t)return O;if(b.log("sending messages to app...",T),u){const e=await webkit.messageHandlers.nativewebkit_reply.postMessage(T);b.log("app response",e),e&&S(e),A(!0)}else{const e=function(){for(var e=0;y.has(e);)e++;return y.add(e),e}();window.dispatchEvent(new CustomEvent("nativewebkit-send",{detail:{message:T,id:e}})),window.addEventListener(`nativewebkit-receive-${e}`,(t=>{const s=t.detail;b.log(`did receive message for nativewebkit-receive-${e}?`,s),s||b.error(`didn't receive message for nativewebkit-receive-${e}`),A(s),y.delete(e)}),{once:!0})}return T.length=0,O}b.warn("NativeWebKit.js is not enabled - run in the NativeWebKit app or enable the NativeWebKit Safari Web Extension")}const C=c("mathUtils");function I(e,t){return 0===t?e:I(t,e%t)}function W(e){if(C.log("finding greatestCommonFactor of numbers",e),0==(e=e.filter((e=>e>0))).length)return null;const t=e.reduce(((e,t)=>I(e,t)));return C.log("greatestCommonFactor",t),0==t?null:t}const U=c("AppMessagePoll");class R{#n=!1;async#r(){if(!await f())return!1;if(u)return this.#n;return await m()}static#o=[];static#c(e){return this.#o.includes(e)?(U.log("poll already included"),this.#o.indexOf(e)):this.#o.push(e)}static#l(e){return this.#o.includes(e)?(e.stop(),this.#o.splice(e,e.#h),this.#g(),!0):(U.log("poll wasn't included"),!1)}get#h(){return R.#o.indexOf(this)}#d;#p;#u=0;get interval(){return this.#p}set interval(e){U.assertWithError(e>0,`invalid interval ${e}ms`),e!=this.#p?(this.#p=e,this.#v&&R.#g()):U.warn("assigning same interval")}constructor(e,t,s=!1){this.#d=e,this.#p=t,this.#n=s,R.#c(this)}static#m=null;static get#f(){return null!=this.#m}static#k=null;static get#w(){return this.#o.filter((e=>e.#b))}static get#y(){return this.#w.map((e=>e.#p))}static#M(){var e=W(this.#y);if(U.log(`new interval ${e}`),this.#k!=e)return U.log(`interval updated from ${this.#k} to ${e}`),this.#k=e,!0}static async#E(){const e=Date.now(),t=this.#w.filter((t=>e-t.#u>=t.#p)),s=t.map((e=>e.#d()));if(U.log("messages",s),s.length>0){const e=await L(s);U.log("didReceiveMessage?",e),e||U.error("app didn't receive message")}else U.log("no messages to send");t.forEach((t=>t.#u=e))}static#S(){this.#f?U.log("tried to start AppMessagePoll when it's already running"):null!=this.#k?(U.log(`starting interval at ${this.#k}`),this.#m=window.setInterval(this.#E.bind(this),this.#k)):U.log("null interval")}static#O(){this.#f?(window.clearInterval(this.#m),this.#m=null):U.log("tried to stop AppMessagePoll when it already isn't running")}static#g(e=!1){if(!this.#f&&!e)return;const t=this.#M();this.#f||t?(U.log("restarting..."),this.#O(),this.#S()):U.log("no need to restart")}#b=!1;get#v(){return R.#f&&this.#b}async start(){await this.#r()&&(this.#v?U.log("poll is already running"):(this.#b=!0,R.#g(!0)))}stop(){this.#v&&(this.#b=!1,R.#g())}destroy(){U.log("destroying poll",this),R.#l(this)}}const D=c("HeadphoneMotionManager");class _ extends h{static#A=["isAvailable","isActive","motionData","sensorLocation"];get eventTypes(){return _.#A}static#T=new _;static get shared(){return this.#T}get _prefix(){return"hm"}_formatMessage(e){return super._formatMessage(e)}addEventListener(e,t,s){return super.addEventListener(...arguments)}removeEventListener(e,t){return super.removeEventListener(...arguments)}hasEventListener(e,t){return super.hasEventListener(...arguments)}dispatchEvent(e){return super.dispatchEvent(...arguments)}constructor(){super(),D.assertWithError(!this.shared,"HeadphoneMotionManager is a singleton - use HeadphoneMotionManager.shared"),E(this.#L.bind(this),"window.load"),E(this.#C.bind(this),this._prefix),E(this.#I.bind(this),"window.unload")}#L(){if(this.#W)return this.#U}#I(){if(this.#R&&this.#D)return this.#_}#W=!1;get checkAvailabilityOnLoad(){return this.#W}set checkAvailabilityOnLoad(e){D.assertWithError("boolean"==typeof e,"invalid newValue for checkAvailabilityOnLoad",e),this.#W=e}#D=!0;get stopUpdatesOnUnload(){return this.#D}set stopUpdatesOnUnload(e){D.assertWithError("boolean"==typeof e,"invalid newValue for stopUpdatesOnUnload",e),this.#D=e}#C(e){D.log(`received background message of type ${e.type}`,e);const{type:t}=e;switch(t){case"isAvailable":this.#F(e.isAvailable);break;case"isActive":this.#$(e.isActive);break;case"getData":this.#x(e.motionData);break;default:throw Error(`uncaught message type ${t}`)}}#P=null;get isAvailable(){return Boolean(this.#P)}#F(e){this.#P!=e&&(this.#P=e,D.log(`updated isAvailable to ${e}`),this.dispatchEvent({type:"isAvailable",message:{isAvailable:this.isAvailable}}),this.#P&&this.#V())}async#j(){return D.log("checking isAvailable..."),L(this.#U)}get#U(){return this._formatMessage({type:"isAvailable"})}#R=null;get isActive(){return Boolean(this.#R)}#$(e){this.#R!=e&&(this.#R=e,D.log(`updated isActive to ${this.isActive}`),this.dispatchEvent({type:"isActive",message:{isActive:this.isActive}}),this.#K.stop(),this.#R?(D.log("starting motion data poll"),this.#N.start()):(D.log("stopping motion data poll"),this.#N.stop()))}async#V(){return D.log("checking isActive"),L(this.#B())}#B(){return this._formatMessage({type:"isActive"})}#K=new R(this.#B.bind(this),50,!0);async startUpdates(){if(this.isAvailable){if(!this.isActive)return D.log("starting motion updates"),this.#K.start(),L(this.#G);D.warn("already active")}else D.warn("not available")}get#G(){return this._formatMessage({type:"startUpdates"})}async stopUpdates(){if(this.isAvailable){if(this.isActive)return D.log("stopping motion updates"),this.#K.start(),L(this.#_);D.warn("already inactive")}else D.warn("not available")}get#_(){return this._formatMessage({type:"stopUpdates"})}async toggleMotionUpdates(){if(this.isAvailable)return this.isActive?this.stopUpdates():this.startUpdates();D.log("not available")}#H;get motionData(){return this.#H}get#q(){return this.motionData?.timestamp||0}#z=null;get sensorLocation(){return this.#z}#J(e){this.#z!=e&&(this.#z=e,D.log(`updated sensor location to ${e}`),this.dispatchEvent({type:"sensorLocation",message:{sensorLocation:this.sensorLocation}}))}#x(e){this.#H=e,D.log("received headphone motion data",this.motionData),this.dispatchEvent({type:"motionData",message:{motionData:this.motionData}}),this.#J(e.sensorLocation)}async#Q(){return D.log("checkMotionData"),L(this.#X)}#X(){return this._formatMessage({type:"getData",timestamp:this.#q})}#N=new R(this.#X.bind(this),20)}var F=_.shared;function $(e,t){if("object"!=typeof e||"object"!=typeof t)return!1;const s=Object.keys(e),a=Object.keys(t);if(s.length!=a.length)return!1;return s.every((s=>s in t&&e[s]==t[s]))}const x=c("ARSession");class P extends h{static#A=["worldTrackingSupport","faceTrackingSupport","isRunning","frame","camera","faceAnchors","faceAnchor","debugOptions","cameraMode","configuration","showCamera","lightEstimate"];get eventTypes(){return P.#A}static#T=new P;static get shared(){return this.#T}get _prefix(){return"ars"}_formatMessage(e){return super._formatMessage(e)}addEventListener(e,t,s){return super.addEventListener(...arguments)}removeEventListener(e,t){return super.removeEventListener(...arguments)}hasEventListener(e,t){return super.hasEventListener(...arguments)}dispatchEvent(e){return super.dispatchEvent(...arguments)}constructor(){super(),x.assertWithError(!this.shared,"ARSessionManager is a singleton - use ARSessionManager.shared"),E(this.#L.bind(this),"window.load"),E(this.#C.bind(this),this._prefix),E(this.#I.bind(this),"window.unload")}get isSupported(){return k&&u}#Y(){if(!this.isSupported)throw w?Error("AR Session is not supported on Mac"):Error("AR Session not supported in iOS Safari")}#Z(){x.assertWithError(this.isRunning,"ARSession is not running")}#L(){if(!this.isSupported)return;const e=[];return this.checkFaceTrackingSupportOnLoad&&e.push(this.#ee),this.checkWorldTrackingSupportOnLoad&&e.push(this.#te),this.checkIsRunningOnLoad&&e.push(this.#se),this.checkDebugOptionsOnLoad&&e.push(this.#ae),this.checkCameraModeOnLoad&&e.push(this.#ie),this.checkShowCameraOnLoad&&e.push(this.#ne),e}#I(){if(!this.isSupported)return;const e=[];return this.pauseOnUnload&&this.isRunning&&e.push(this.#re),e}#oe={isSupported:!1,supportsUserFaceTracking:!1};get worldTrackingSupport(){return this.#oe}#ce(e){$(this.#oe,e)||(this.#oe=e,x.log("updated worldTrackingSupport",e),this.dispatchEvent({type:"worldTrackingSupport",message:{worldTrackingSupport:this.worldTrackingSupport}}))}#le=!1;get checkWorldTrackingSupportOnLoad(){return this.#le}set checkWorldTrackingSupportOnLoad(e){x.assertWithError("boolean"==typeof e,"invalid newValue for checkWorldTrackingSupportOnLoad",e),this.#le=e}async#he(){return this.#Y(),x.log("checking world tracking support..."),L(this.#te)}get#te(){return this._formatMessage({type:"worldTrackingSupport"})}#ge={isSupported:!1,supportsWorldTracking:!1};get faceTrackingSupport(){return this.#ge}#de(e){$(this.#ge,e)||(this.#ge=e,x.log("updated faceTrackingSupport",e),this.dispatchEvent({type:"faceTrackingSupport",message:{faceTrackingSupport:this.faceTrackingSupport}}))}#pe=!1;get checkFaceTrackingSupportOnLoad(){return this.#pe}set checkFaceTrackingSupportOnLoad(e){x.assertWithError("boolean"==typeof e,"invalid newValue for checkFaceTrackingSupportOnLoad",e),this.#pe=e}async#ue(){return this.#Y(),x.log("checking face tracking support..."),L(this.#ee)}get#ee(){return this._formatMessage({type:"faceTrackingSupport"})}#v=!1;get isRunning(){return this.#v}#ve(e){this.#v!=e&&(this.#v=e,x.log(`updated isRunning to ${e}`),this.dispatchEvent({type:"isRunning",message:{isRunning:this.isRunning}}),this.isRunning&&this.#me())}async#fe(){return this.#Y(),x.log("checking isRunning..."),L(this.#se)}get#se(){return this._formatMessage({type:"isRunning"})}#ke=!1;get checkIsRunningOnLoad(){return this.#ke}set checkIsRunningOnLoad(e){x.assertWithError("boolean"==typeof e,"invalid newValue for checkIsRunningOnLoad",e),this.#ke=e}#we=!0;get pauseOnUnload(){return this.#we}set pauseOnUnload(e){x.assertWithError("boolean"==typeof e,"invalid newValue for pauseOnUnload",e),this.#we=e}#be(e){switch(x.log("assertConfigurationIsValid",e),x.assertWithError(e,"configuration required to run ARSession"),x.assertWithError(e.type,'"type" property required in configuration"'),x.assertWithError(this.allConfigurationTypes.includes(e.type),`invalid configuration type "${e.type}"`),e.type){case"worldTracking":const t=Object.keys(e).find((e=>"type"!==e&&!this.#ye.includes(e)));x.assertWithError(!t,`invalid worldTracking configuration key "${t}"`);const s=e;x.assertWithError(this.worldTrackingSupport.isSupported,"your device doesn't support world tracking"),x.assertWithError(!s.userFaceTrackingEnabled||this.worldTrackingSupport.supportsUserFaceTracking,"your device doesn't support user face tracking with world tracking");break;case"faceTracking":const a=Object.keys(e).find((e=>"type"!==e&&!this.#Me.includes(e)));x.assertWithError(!a,`invalid faceTracking configuration key "${a}"`);const i=e;x.assertWithError(this.faceTrackingSupport.isSupported,"your device doesn't support face tracking"),x.assertWithError(!i.isWorldTrackingEnabled||this.faceTrackingSupport.supportsWorldTracking,"your device doesn't support user world tracking with face tracking");break;default:throw Error(`uncaught configuration type "${e.type}"`)}}async run(e){return this.#Y(),this.#be(e),x.log("running with configuraton",e),L(this.#Ee(e))}#Ee(e){return this._formatMessage({type:"run",configuration:e})}async pause(){return x.log("pause..."),L(this.#re)}get#re(){return this._formatMessage({type:"pause"})}#Se=["worldTracking","faceTracking"];get allConfigurationTypes(){return this.#Se}#ye=["userFaceTrackingEnabled"];#Me=["isWorldTrackingEnabled","maximumNumberOfTrackedFaces"];#Oe=null;get configuration(){return this.#Oe}async#me(){return this.#Y(),this.#Z(),x.log("checking configuration..."),L(this.#Ae)}get#Ae(){return this._formatMessage({type:"configuration"})}#Te(e){this.#Oe=e,x.log("updated configuration",this.configuration),this.dispatchEvent({type:"configuration",message:{configuration:this.configuration}})}#Le=null;get frame(){return this.#Le}#Ce=null;get camera(){return this.#Ce}#Ie=null;get lightEstimate(){return this.#Ie}#We=null;get faceAnchors(){return this.#We}#Ue(e){this.#Le=e,x.log("received frame",this.frame),this.dispatchEvent({type:"frame",message:{frame:this.frame}}),this.#Re(e.camera),e.lightEstimate&&this.#De(e.lightEstimate),e.faceAnchors&&this.#_e(e.faceAnchors)}#Re(e){this.#Ce=e,x.log("received camera",this.camera),this.dispatchEvent({type:"camera",message:{camera:this.camera}})}#De(e){this.#Ie=e,x.log("received lightEstimate",this.lightEstimate),this.dispatchEvent({type:"lightEstimate",message:{lightEstimate:this.lightEstimate}})}#_e(e){this.#We=e,x.log("received faceAnchors",this.faceAnchors),this.dispatchEvent({type:"faceAnchors",message:{faceAnchors:this.faceAnchors}}),e.forEach((e=>{this.dispatchEvent({type:"faceAnchor",message:{faceAnchor:e}})}))}#Fe=["none","showAnchorGeometry","showAnchorOrigins","showFeaturePoints","showPhysics","showSceneUnderstanding","showStatistics","showWorldOrigin"];get allDebugOptions(){return this.#Fe}#$e=null;get debugOptions(){return this.#$e}#xe(e){this.#$e=e,x.log("received debugOptions",this.debugOptions),this.dispatchEvent({type:"debugOptions",message:{debugOptions:this.debugOptions}})}async#Pe(){return this.#Y(),x.log("checking debugOptions..."),L(this.#ae)}get#ae(){return this._formatMessage({type:"debugOptions"})}async setDebugOptions(e){this.#Y(),x.assertWithError("object"==typeof e,"debugOptions must be an object",e);const t=Object.keys(e).find((e=>!this.#Fe.includes(e)));return x.assertWithError(!t,`invalid debugOptions key ${t}`),x.log("setting debugOptions...",e),L(this.#Ve(e))}#Ve(e){return this._formatMessage({type:"debugOptions",debugOptions:e})}#je=!1;get checkDebugOptionsOnLoad(){return this.#je}set checkDebugOptionsOnLoad(e){x.assertWithError("boolean"==typeof e,"invalid newValue for checkDebugOptionsOnLoad",e),this.#je=e}#Ke=["ar","nonAR"];get allCameraModes(){return this.#Ke}#Ne=null;get cameraMode(){return this.#Ne}async#Be(){return this.#Y(),x.log("checking cameraMode..."),L(this.#ie)}get#ie(){return this._formatMessage({type:"cameraMode"})}#Ge(e){return this._formatMessage({type:"cameraMode",cameraMode:e})}async setCameraMode(e){this.#Y();const t=this.#Ke.includes(e);if(x.assertWithError(t,`invalid cameraMode "${e}"`),e!=this.#Ne)return x.log("setting cameraMode...",e),L(this.#Ge(e));x.log(`cameraMode is already set to "${this.#Ne}"`)}#He=!1;get checkCameraModeOnLoad(){return this.#He}set checkCameraModeOnLoad(e){x.assertWithError("boolean"==typeof e,"invalid newValue for checkCameraModeOnLoad",e),this.#He=e}#qe(e){this.#Ne!=e&&(this.#Ne=e,x.log(`updated cameraMode to ${this.cameraMode}`),this.dispatchEvent({type:"cameraMode",message:{cameraMode:this.cameraMode}}))}#ze=null;get showCamera(){return this.#ze}async#Je(){return this.#Y(),x.log("checking showCamera..."),L(this.#ne)}#Qe(e){this.#ze!=e&&(this.#ze=e,x.log(`updated showCamera to ${this.showCamera}`),this.dispatchEvent({type:"showCamera",message:{showCamera:this.showCamera}}))}#Xe=!1;get checkShowCameraOnLoad(){return this.#Xe}set checkShowCameraOnLoad(e){x.assertWithError("boolean"==typeof e,"invalid newValue for checkShowCameraOnLoad",e),this.#Xe=e}async setShowCamera(e){if(this.#Y(),e!=this.#ze)return x.log("setting showCamera...",e),L(this.#Ye(e));x.log(`showCamera is already set to "${this.#ze}"`)}get#ne(){return this._formatMessage({type:"showCamera"})}#Ye(e){return this._formatMessage({type:"showCamera",showCamera:e})}#C(e){x.log(`received background message of type ${e.type}`,e);const{type:t}=e;switch(t){case"faceTrackingSupport":x.log("received faceTrackingSupport message",e),this.#de(e.faceTrackingSupport);break;case"worldTrackingSupport":x.log("received worldTrackingSupport message",e),this.#ce(e.worldTrackingSupport);break;case"isRunning":x.log("received isRunning message",e),this.#ve(e.isRunning);break;case"configuration":x.log("received configuration message",e),this.#Te(e.configuration);break;case"debugOptions":x.log("received debugOptions message",e),this.#xe(e.debugOptions);break;case"cameraMode":x.log("received cameraMode message",e),this.#qe(e.cameraMode);break;case"frame":x.log("received frame message",e),this.#Ue(e.frame);break;case"showCamera":x.log("received showCamera message",e),this.#Qe(e.showCamera);break;default:throw Error(`uncaught message type ${t}`)}}}var V=P.shared;var j=Object.freeze({__proto__:null,areObjectsEqual:$,checkIfNativeWebKitEnabled:f,checkIfSafariExtensionIsInstalled:m,colorTemperatureToRGB:function(e){var t,s,a,i=e/100;return i<=66?(t=255,s=i,s=99.4708025861*Math.log(s)-161.1195681661,i<=19?a=0:(a=i-10,a=138.5177312231*Math.log(a)-305.0447927307)):(t=i-60,t=329.698727446*Math.pow(t,-.1332047592),s=i-60,s=288.1221695283*Math.pow(s,-.0755148492),a=255),[t,s,a].map((e=>function(e,t,s){return e<t?t:e>s?s:e}(e/255,0,1)))},isInApp:u,isInSafari:p,isMac:w,is_iOS:k,openInApp:()=>{if(p){const e=document.createElement("a"),t=`nativewebkit://${location.href}`;g.log("attempting to open current link in App...",location.href,t),e.href=t,e.click()}else g.warn("unable to open link in app - not in safari")},setAllConsoleLevelFlags:function(e){o.setAllLevelFlags(e)},setConsoleLevelFlagsForType:function(e,t){o.setLevelFlagsForType(e,t)}});e.ARSessionManager=V,e.HeadphoneMotionManager=F,e.utils=j}));
